"""
Django settings for chillAmbientalist project.

Generated by 'django-admin startproject' using Django 3.0.5.

"""
# System Libraries
import os
# Importar json (Libro)
import json
# Importar sys (Libro)
import sys
# Importar excepcion para seguridad (Libro)
from django.core.exceptions import ImproperlyConfigured
# Importar timestamp desde apps/core/versioning.py
from chillAmbientalist.apps.core.versioning import get_git_changeset_timestamp
# Importar Transtlation Gettext
from django.utils.translation import gettext_lazy as _

# BASE_DIR
BASE_DIR = os.path.dirname(
    os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
)

# EXTERNAL_BASE, EXTERNAL_LIBS_PATH Y EXTERNAL_APPS_PATH (Libro)
# (Para llamar las librerias y aplicaciones externas y que sean reconocidas como si estuvieran instaladas)
EXTERNAL_BASE = os.path.join(BASE_DIR, "externals")
EXTERNAL_LIBS_PATH = os.path.join(EXTERNAL_BASE, "libs")
EXTERNAL_APPS_PATH = os.path.join(EXTERNAL_BASE, "apps")
sys.path = ["", EXTERNAL_LIBS_PATH, EXTERNAL_APPS_PATH] + sys.path

# Abrir archivo json que contenga las claves secretas del proyecto, este archivo deberá ser excluido con gitignore por seguridad.
with open(os.path.join(os.path.dirname(__file__), 'secrets.json'), 'r') as f:
    secrets = json.loads(f.read()) 

# Definir funcion get_secret() donde le pasamos el json (Libro)
def get_secret(setting):
    """Get the secret variable or return explicit exception"""
    try:
        return secrets[setting]
    except KeyError:
        error_msg = f'Set the {setting} environment variable'
        raise ImproperlyConfigured(error_msg)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# El string de esta llave usaremos para las claves secretas, actualmente estará en secret_keys_django.txt

# Llave secreta usando la funcion get_secret()
SECRET_KEY = get_secret('DJANGO_SECRET_KEY')

# Host Permitidos
ALLOWED_HOSTS = [
    'localhost', '127.0.0.1'
]

# Configuramos los middleware para habilitar los peticiones de sitios cruzados
CORS_ORIGIN_ALLOW_ALL = True

# Para evitar ataques, en CORS agregar a una lista blanca:
# "http://localhost:8080" es donde consume VueJs
CORS_ORIGIN_WHITELIST = [
    "http://localhost:8080",
]


# Application definition

# Referencia de app account
# Definir account primero, ya que ahí yace el html de password_change_form antes del admin para que lo tome
# Referencia humanize
# Referencia rest de django
# Referencia de cors de django
# Referencia de bootstrapform
# Referencia de app gallery
# En caso de instalar un tema en el admin, debe ir mas arriba
# referencia de debug_toolbar
# referencia mixins contenttypes

INSTALLED_APPS = [
    # 'account',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.humanize',
    'django.contrib.staticfiles',
    # third-party
    'debug_toolbar',
    'rest_framework',
    'corsheaders',
    'taggit',
    'easy_thumbnails',
    'stdimage',
    'crispy_forms',
    # local
    #'chillAmbientalist',
    'gallery',
]

# Se agrega corsheaders
# Se agrega DebugToolbarMiddleware
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'debug_toolbar.middleware.DebugToolbarMiddleware',
]

ROOT_URLCONF = 'chillAmbientalist.urls'

# Añadimos context_processors desde la App gallery
# Modificacion DIRS: [os.path.join(os.path.dirname(__file__), 'templates').replace('\\', '/')]
# Mod DIRS: Seleccionamos el BASE_DIR, el nombre del proyecto y la carpeta templates
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'chillAmbientalist', 'templates')
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.media',
                'gallery.context_processors.add_gallery_to_context',
            ],
        },
    },
]

WSGI_APPLICATION = 'chillAmbientalist.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

# Conexion de BBDD a MySQL / Postgresql
# Utilizar pip install mysqlclient - psycopg2

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': get_secret('DATABASE_NAME'),
        'USER': get_secret('DATABASE_USER'),
        'PASSWORD': get_secret('DATABASE_PASSWORD'),
        'HOST': 'localhost',
        'PORT': '5432',
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/
#ugettext = lambda s: s
"""
LANGUAGES = (
    ('en', ugettext('English')),
    ('es', ugettext('Spanish')),
)
"""
LANGUAGE_CODE = "es"

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# LOCALE_PATHS
LOCALE_PATHS = [
    os.path.join(BASE_DIR, 'locale')
]

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

# STATICFILES_DIRS
# Para que funcione añadir site/ despues de static
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'chillAmbientalist', 'site_static')
]

# Usamos timestamp para evitar borrar el caché en el navegador, fuerza a descargar los archivos estaticos 
timestamp = get_git_changeset_timestamp(BASE_DIR)

# En caso de usar Docker tiene que incluir el timestamp en txt
"""
with open(os.path.join(BASE_DIR, 'chillAmbientalist', 'settings', 'last-update.txt'), 'r') as f:
    timestamp = f.readline().strip()
"""

# STATIC_URL le pasamos el timestamp
STATIC_URL = f'/static/{timestamp}/'

# STATIC_ROOT (Por alguna razón no toma los archivos se probó desactivando STATICFILES_DIRS)
STATIC_ROOT = os.path.join(BASE_DIR, 'static')

# MEDIA_URL para generalizar la carpeta donde iran los archivos subidos
MEDIA_URL = '/uploads/'

# MEDIA_ROOT
MEDIA_ROOT = os.path.join(BASE_DIR, 'uploads')

# Cambiar el redirect de logout
# LOGOUT_REDIRECT_URL= '/accounts/login/'

# Paginación para el Rest
REST_FRAMEWORK = {
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
    'PAGE_SIZE': 5,
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.BasicAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ]
}

